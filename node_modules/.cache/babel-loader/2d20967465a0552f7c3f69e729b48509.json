{"ast":null,"code":"var _jsxFileName = \"/Users/samridhsood/Desktop/frontend/src/scorecard/OptionMenu.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst OptionMenu = () => {\n  _s();\n\n  const [dates, setDates] = useState([]);\n  const [selectedDate, setSelectedDate] = useState(''); // Simulating the dates data\n\n  const fetchDates = () => {\n    const dateString = '2023-04-06T18:30:00.000+00:00';\n    const dateObject = new Date(dateString);\n    const year = dateObject.getFullYear();\n    const month = String(dateObject.getMonth() + 1).padStart(2, '0');\n    const day = String(dateObject.getDate()).padStart(2, '0');\n    const formattedDate = `${year}-${month}-${day}`; // Replace this with your actual data fetching logic\n\n    const mockDates = ['2023-07-01', '2023-07-02', '2023-07-03', '2023-07-04', '2023-07-05'];\n    setDates(mockDates);\n    setSelectedDate(mockDates[0]); // Set the first date as the initial selected date\n  };\n\n  useEffect(() => {\n    fetchDates();\n  }, []);\n\n  const handleDateChange = event => {\n    setSelectedDate(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"dateSelect\",\n      children: \"Select a Date:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"dateSelect\",\n      value: selectedDate,\n      onChange: handleDateChange,\n      children: dates.map((date, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: date,\n        children: date\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Selected Date: \", selectedDate]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(OptionMenu, \"Oo0DEKs+z63WYTRuxl083F+xIDk=\");\n\n_c = OptionMenu;\nexport default OptionMenu;\n\nvar _c;\n\n$RefreshReg$(_c, \"OptionMenu\");","map":{"version":3,"names":["React","useState","useEffect","OptionMenu","dates","setDates","selectedDate","setSelectedDate","fetchDates","dateString","dateObject","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","formattedDate","mockDates","handleDateChange","event","target","value","map","date","index"],"sources":["/Users/samridhsood/Desktop/frontend/src/scorecard/OptionMenu.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst OptionMenu = () => {\n  const [dates, setDates] = useState([]);\n  const [selectedDate, setSelectedDate] = useState('');\n\n  // Simulating the dates data\n  const fetchDates = () => {\n\n\n    const dateString = '2023-04-06T18:30:00.000+00:00';\n    const dateObject = new Date(dateString);\n    \n    const year = dateObject.getFullYear();\n    const month = String(dateObject.getMonth() + 1).padStart(2, '0');\n    const day = String(dateObject.getDate()).padStart(2, '0');\n    \n    const formattedDate = `${year}-${month}-${day}`;\n\n\n    // Replace this with your actual data fetching logic\n    const mockDates = ['2023-07-01', '2023-07-02', '2023-07-03', '2023-07-04', '2023-07-05'];\n    setDates(mockDates);\n    setSelectedDate(mockDates[0]); // Set the first date as the initial selected date\n  };\n\n  useEffect(() => {\n    fetchDates();\n  }, []);\n\n  const handleDateChange = (event) => {\n    setSelectedDate(event.target.value);\n  };\n\n  return (\n    <div>\n      <label htmlFor=\"dateSelect\">Select a Date:</label>\n      <select id=\"dateSelect\" value={selectedDate} onChange={handleDateChange}>\n        {dates.map((date, index) => (\n          <option key={index} value={date}>\n            {date}\n          </option>\n        ))}\n      </select>\n      <p>Selected Date: {selectedDate}</p>\n    </div>\n  );\n};\n\nexport default OptionMenu;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AAEA,MAAMC,UAAU,GAAG,MAAM;EAAA;;EACvB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC;EACA,MAAM,CAACK,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,EAAD,CAAhD,CAFuB,CAIvB;;EACA,MAAMO,UAAU,GAAG,MAAM;IAGvB,MAAMC,UAAU,GAAG,+BAAnB;IACA,MAAMC,UAAU,GAAG,IAAIC,IAAJ,CAASF,UAAT,CAAnB;IAEA,MAAMG,IAAI,GAAGF,UAAU,CAACG,WAAX,EAAb;IACA,MAAMC,KAAK,GAAGC,MAAM,CAACL,UAAU,CAACM,QAAX,KAAwB,CAAzB,CAAN,CAAkCC,QAAlC,CAA2C,CAA3C,EAA8C,GAA9C,CAAd;IACA,MAAMC,GAAG,GAAGH,MAAM,CAACL,UAAU,CAACS,OAAX,EAAD,CAAN,CAA6BF,QAA7B,CAAsC,CAAtC,EAAyC,GAAzC,CAAZ;IAEA,MAAMG,aAAa,GAAI,GAAER,IAAK,IAAGE,KAAM,IAAGI,GAAI,EAA9C,CAVuB,CAavB;;IACA,MAAMG,SAAS,GAAG,CAAC,YAAD,EAAe,YAAf,EAA6B,YAA7B,EAA2C,YAA3C,EAAyD,YAAzD,CAAlB;IACAhB,QAAQ,CAACgB,SAAD,CAAR;IACAd,eAAe,CAACc,SAAS,CAAC,CAAD,CAAV,CAAf,CAhBuB,CAgBQ;EAChC,CAjBD;;EAmBAnB,SAAS,CAAC,MAAM;IACdM,UAAU;EACX,CAFQ,EAEN,EAFM,CAAT;;EAIA,MAAMc,gBAAgB,GAAIC,KAAD,IAAW;IAClChB,eAAe,CAACgB,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;EACD,CAFD;;EAIA,oBACE;IAAA,wBACE;MAAO,OAAO,EAAC,YAAf;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAQ,EAAE,EAAC,YAAX;MAAwB,KAAK,EAAEnB,YAA/B;MAA6C,QAAQ,EAAEgB,gBAAvD;MAAA,UACGlB,KAAK,CAACsB,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,kBACT;QAAoB,KAAK,EAAED,IAA3B;QAAA,UACGA;MADH,GAAaC,KAAb;QAAA;QAAA;QAAA;MAAA,QADD;IADH;MAAA;MAAA;MAAA;IAAA,QAFF,eASE;MAAA,8BAAmBtB,YAAnB;IAAA;MAAA;MAAA;MAAA;IAAA,QATF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAaD,CA7CD;;GAAMH,U;;KAAAA,U;AA+CN,eAAeA,UAAf"},"metadata":{},"sourceType":"module"}